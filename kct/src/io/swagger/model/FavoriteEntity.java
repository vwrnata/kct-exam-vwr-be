/*
 * Cat Breed Api
 * API pro ukladani oblíbených plemen koček
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.v3.oas.annotations.media.Schema;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * FavoriteEntity
 */
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaJerseyServerCodegen", date = "2021-01-16T08:00:40.804Z[GMT]")
public class FavoriteEntity {
    @JsonProperty("id")
    private String id = null;

    @JsonProperty("name")
    private String name = null;

    @JsonProperty("description")
    private String description = null;

    @JsonProperty("origin")
    private String origin = null;

    @JsonProperty("width")
    private Integer width = null;

    @JsonProperty("height")
    private Integer height = null;

    @JsonProperty("url")
    private String url = null;

    public FavoriteEntity id(String id) {
        this.id = id;
        return this;
    }

    /**
     * ID plemena (breed)
     * 
     * @return id
     **/
    @JsonProperty("id")
    @Schema(example = "raga", description = "ID plemena (breed)")
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public FavoriteEntity name(String name) {
        this.name = name;
        return this;
    }

    /**
     * Název plemena
     * 
     * @return name
     **/
    @JsonProperty("name")
    @Schema(example = "Ragamuffin", description = "Název plemena")
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public FavoriteEntity description(String description) {
        this.description = description;
        return this;
    }

    /**
     * Popis plemena
     * 
     * @return description
     **/
    @JsonProperty("description")
    @Schema(example = "The Ragamuffin is calm, even tempered and gets along well with all family members. Changes in routine generally do not upset her. She is an ideal companion for those in apartments, and with children due to her patient nature.", description = "Popis plemena")
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public FavoriteEntity origin(String origin) {
        this.origin = origin;
        return this;
    }

    /**
     * Země původu
     * 
     * @return origin
     **/
    @JsonProperty("origin")
    @Schema(example = "United States", description = "Země původu")
    public String getOrigin() {
        return origin;
    }

    public void setOrigin(String origin) {
        this.origin = origin;
    }

    public FavoriteEntity width(Integer width) {
        this.width = width;
        return this;
    }

    /**
     * Šířka obrázku
     * 
     * @return width
     **/
    @JsonProperty("width")
    @Schema(example = "800", description = "Šířka obrázku")
    public Integer getWidth() {
        return width;
    }

    public void setWidth(Integer width) {
        this.width = width;
    }

    public FavoriteEntity height(Integer height) {
        this.height = height;
        return this;
    }

    /**
     * Výška obrázku
     * 
     * @return height
     **/
    @JsonProperty("height")
    @Schema(example = "600", description = "Výška obrázku")
    public Integer getHeight() {
        return height;
    }

    public void setHeight(Integer height) {
        this.height = height;
    }

    public FavoriteEntity url(String url) {
        this.url = url;
        return this;
    }

    /**
     * URL obrázku
     * 
     * @return url
     **/
    @JsonProperty("url")
    @Schema(example = "https://cdn2.thecatapi.com/images/wwFp9IiRd.jpg", description = "URL obrázku")
    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FavoriteEntity favoriteEntity = (FavoriteEntity) o;
        return Objects.equals(this.id, favoriteEntity.id) && Objects.equals(this.name, favoriteEntity.name)
                && Objects.equals(this.description, favoriteEntity.description)
                && Objects.equals(this.origin, favoriteEntity.origin)
                && Objects.equals(this.width, favoriteEntity.width)
                && Objects.equals(this.height, favoriteEntity.height) && Objects.equals(this.url, favoriteEntity.url);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, name, description, origin, width, height, url);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class FavoriteEntity {\n");

        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
        sb.append("    width: ").append(toIndentedString(width)).append("\n");
        sb.append("    height: ").append(toIndentedString(height)).append("\n");
        sb.append("    url: ").append(toIndentedString(url)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
